#include "practice6.h"

void Task60() {
  cout << "Enter n (positive int required)\n";
  int n = IntegerInput();
  if (n < 1) {
    cout << "Incorrect data entered\n";
    return;
  }
  int** square_matrix;
  square_matrix = new int*[n];
  int side_diagonal_j = n - 1;
  int desired_min_element = INT_MAX;
  for (int i = 0; i < n; i++) {
    cout << "Enter " << n << " numbers\n";
    square_matrix[i] = new int[n];
    for (int j = 0; j < n; j++) {
      square_matrix[i][j] = DoubleInput();
      if (square_matrix[i][j] == kIncorrectUserData) {
        cout << "Incorrect data entered\n";
        for (int z = 0; z <= i; z++) delete[] square_matrix[z];
        delete[] square_matrix;
        return;
      }
      if (j >= side_diagonal_j - 1 and j <= side_diagonal_j + 1 and
          square_matrix[i][j] < desired_min_element)
        desired_min_element = square_matrix[i][j];
    }
    side_diagonal_j--;
  }
  cout << desired_min_element << endl;
  for (int i = 0; i < n; i++) delete[] square_matrix[i];
  delete[] square_matrix;
}

int LCM(int first_number, int second_number) {
  if (first_number != 0 and second_number != 0) {
    if (first_number > second_number)
      first_number %= second_number;
    else
      second_number %= first_number;
    return LCM(first_number, second_number);
  } else {
    return first_number + second_number;
  }
}

void Task74() {
  cout << "Enter 4 positive integers: A, B, C, D\n";
  int A = IntegerInput(), B = IntegerInput(), C = IntegerInput(),
      D = IntegerInput();
  if (A < 0 or B < 0 or C < 0 or D < 0) {
    cout << "Incorrect data entered\n";
    return;
  }
  cout << "LCM(A,B) = " << LCM(A, B) << endl
       << "LCM(A,C) = " << LCM(A, C) << endl
       << "LCM(A,D) = " << LCM(A, D) << endl;
}

void Task82() {
  cout << "Enter 2 positive integers\n";
  int fist_number = IntegerInput(), second_number = IntegerInput();
  if (fist_number < 1 or second_number < 1) {
    cout << "Incorrect data entered\n";
    return;
  }
  cout << "Their LCM = " << LCM(fist_number, second_number) << endl;
}

// AI autogenerated function
int* findLCS(const int* x, int m, const int* y, int n, int& lcsLength) {
  int** dp = new int*[m + 1];
  for (int i = 0; i <= m; ++i) {
    dp[i] = new int[n + 1];
  }
  for (int i = 0; i <= m; ++i) {
    for (int j = 0; j <= n; ++j) {
      if (i == 0 || j == 0) {
        dp[i][j] = 0;
      }
    }
  }
  for (int i = 1; i <= m; ++i) {
    for (int j = 1; j <= n; ++j) {
      if (x[i - 1] == y[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }
  lcsLength = dp[m][n];
  int* lcs = new int[lcsLength];
  int i = m, j = n, index = lcsLength - 1;
  while (i > 0 && j > 0) {
    if (x[i - 1] == y[j - 1]) {
      lcs[index] = x[i - 1];
      i--;
      j--;
      index--;
    } else if (dp[i - 1][j] > dp[i][j - 1]) {
      i--;
    } else {
      j--;
    }
  }
  for (int i = 0; i <= m; ++i) {
    delete[] dp[i];
  }
  delete[] dp;
  return lcs;
}

void Task85() {
  cout << "Enter 2 positive integers: n and m\n";
  int n = IntegerInput(), m = IntegerInput();
  if (n < 1 or m < 1) {
    cout << "Incorrect data entered\n";
    return;
  }
  int* x = new int[n];
  cout << "Enter " << n << " numbers\n";
  for (int i = 0; i < n; i++) {
    x[i] = DoubleInput();
    if (x[i] == kIncorrectUserData) {
      delete[] x;
      cout << "Incorrect data entered\n";
      return;
    }
  }
  int* y = new int[m];
  cout << "Enter " << m << " numbers\n";
  for (int i = 0; i < m; i++) {
    y[i] = DoubleInput();
    if (y[i] == kIncorrectUserData) {
      cout << "Incorrect data entered\n";
      delete[] x, y;
      return;
    }
  }
  int lcs_length = 0;
  int* lcs = findLCS(x, m, y, n, lcs_length);
  if (lcs_length == 0) {
    cout << "This sequences don't have any subsequences\n";
  } else {
    cout << "Largest common subsequence: ";
    for (int i = 0; i < lcs_length; ++i) {
      cout << lcs[i] << " ";
    }
    cout << endl;
  }
  delete[] lcs, x, y;
}

void Task89() {
  cout << "Enter 2 positive integers: n and m\n";
  int n = IntegerInput(), m = IntegerInput();
  if (n < 1 or m < 1) {
    cout << "Incorrect data entered\n";
    return;
  }
  int* a = new int[n + 1];
  a[0] = 0;
  cout << "Enter " << n << " numbers\n";
  for (int i = 1; i <= n; i++) {
    a[i] = IntegerInput();
    if (a[i] < 1) {
      cout << "Incorrect data entered\n";
      delete[] a;
      return;
    }
  }
  for (int i = 1; i <= n; i++) {
    if (a[i] > m) a[i] = 0;
    if (a[i] == m) {
      cout << a[i] << endl;
      return;
    }
  }
  for (int i = 1; i <= n; i++) {
    if (a[i] != 0) {
      int sum = 0;
      for (int j = i; j <= n or sum > m; j++) {
        if (a[j] == 0) break;
        sum += a[j];
        if (sum == m) {
          for (int z = i; z <= j; z++) cout << a[z] << ' ';
          cout << endl;
          delete[] a;
          return;
        }
      }
    }
  }
  delete[] a;
  cout << "This sequence doesn't have a desired sequence\n";
}

int main() {
  cout << "Greetings. The program was written by Ilya Kramarenko, "
          "IVBO-10-23.\n";
  int command = 1;
  while (command != 0) {
    cout << "Enter task number separate digit or '0' for exit\n";
    command = IntegerInput();
    if (command == 60)
      Task60();
    else if (command == 74)
      Task74();
    else if (command == 82)
      Task82();
    else if (command == 85)
      Task85();
    else if (command == 89)
      Task89();
    else if (command == 0)
      break;
    else
      cout << "Wrong command.\n";
  }
  return 0;
}